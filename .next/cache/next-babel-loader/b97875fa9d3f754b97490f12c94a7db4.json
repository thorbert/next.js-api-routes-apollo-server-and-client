{"ast":null,"code":"// Hold all endpoints data here\nimport fetch from \"node-fetch\";\nconst GITHUB_BASE_API = \"https://api.github.com\";\nexport const resolvers = {\n  Query: {\n    viewer(_parent, _args, _context, _info) {\n      return {\n        id: 1,\n        name: \"John Smith 2\",\n        status: \"\"\n      };\n    },\n\n    git_user: async (parent, args, context, info) => {\n      console.log(\"git_user args => \", args.id); // let github_user = _args.id;\n\n      let github_user = \"lukethacoder\";\n      fetch(`${GITHUB_BASE_API}/users/${args.id}`).then(res => res.json()).then(git_data => {\n        console.log(\"git_data => \", git_data);\n\n        if (git_data.id) {\n          return {\n            id: git_data.id,\n            name: `Mr Git ${git_data.login}`,\n            status: \"wip\"\n          };\n        } else {\n          console.error(git_data.message);\n          return {\n            id: \"invalid\",\n            name: \"invalid\",\n            status: \"invalid\"\n          };\n        }\n      }).catch(err => {\n        return {\n          id: 0,\n          name: err.message,\n          status: err.message\n        };\n      }); // try {\n      //   return fetch(`https://api.github.com/users/${github_user}`)\n      //     .then(user => ({\n      //       id: user.id,\n      //       name: `Mr Git ${user.login}`,\n      //       status: \"wip\"\n      //     }))\n      //     .catch(err => {\n      //       throw new AuthenticationError(\"Invalid Github Endpoint => \", err);\n      //     });\n      // } catch {\n      //   throw new AuthenticationError(\"Invalid Github Endpoint => \", err);\n      // }\n      // try {\n      //   const { id, email } = jwt.verify(token, JWT_SECRET);\n      //   return users.find(user => user.id === id && user.email === email);\n      // } catch {\n      //   throw new AuthenticationError(\n      //     \"Authentication token is invalid, please log in\"\n      //   );\n      // }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/lukes/Documents/Github/next.js-api-routes-apollo-server-and-client/apollo/resolvers.js"],"names":["fetch","GITHUB_BASE_API","resolvers","Query","viewer","_parent","_args","_context","_info","id","name","status","git_user","parent","args","context","info","console","log","github_user","then","res","json","git_data","login","error","message","catch","err"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,YAAlB;AACA,MAAMC,eAAe,GAAG,wBAAxB;AAEA,OAAO,MAAMC,SAAS,GAAG;AACvBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,CAACC,OAAD,EAAUC,KAAV,EAAiBC,QAAjB,EAA2BC,KAA3B,EAAkC;AACtC,aAAO;AAAEC,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,IAAI,EAAE,cAAf;AAA+BC,QAAAA,MAAM,EAAE;AAAvC,OAAP;AACD,KAHI;;AAILC,IAAAA,QAAQ,EAAE,OAAOC,MAAP,EAAeC,IAAf,EAAqBC,OAArB,EAA8BC,IAA9B,KAAuC;AAC/CC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCJ,IAAI,CAACL,EAAtC,EAD+C,CAE/C;;AACA,UAAIU,WAAW,GAAG,cAAlB;AAEAnB,MAAAA,KAAK,CAAE,GAAEC,eAAgB,UAASa,IAAI,CAACL,EAAG,EAArC,CAAL,CACGW,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQG,QAAQ,IAAI;AAChBN,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BK,QAA5B;;AACA,YAAIA,QAAQ,CAACd,EAAb,EAAiB;AACf,iBAAO;AACLA,YAAAA,EAAE,EAAEc,QAAQ,CAACd,EADR;AAELC,YAAAA,IAAI,EAAG,UAASa,QAAQ,CAACC,KAAM,EAF1B;AAGLb,YAAAA,MAAM,EAAE;AAHH,WAAP;AAKD,SAND,MAMO;AACLM,UAAAA,OAAO,CAACQ,KAAR,CAAcF,QAAQ,CAACG,OAAvB;AACA,iBAAO;AACLjB,YAAAA,EAAE,EAAE,SADC;AAELC,YAAAA,IAAI,EAAE,SAFD;AAGLC,YAAAA,MAAM,EAAE;AAHH,WAAP;AAKD;AACF,OAlBH,EAmBGgB,KAnBH,CAmBSC,GAAG,IAAI;AACZ,eAAO;AACLnB,UAAAA,EAAE,EAAE,CADC;AAELC,UAAAA,IAAI,EAAEkB,GAAG,CAACF,OAFL;AAGLf,UAAAA,MAAM,EAAEiB,GAAG,CAACF;AAHP,SAAP;AAKD,OAzBH,EAL+C,CA+B/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACD;AA1DI;AADgB,CAAlB","sourcesContent":["// Hold all endpoints data here\nimport fetch from \"node-fetch\";\nconst GITHUB_BASE_API = \"https://api.github.com\";\n\nexport const resolvers = {\n  Query: {\n    viewer(_parent, _args, _context, _info) {\n      return { id: 1, name: \"John Smith 2\", status: \"\" };\n    },\n    git_user: async (parent, args, context, info) => {\n      console.log(\"git_user args => \", args.id);\n      // let github_user = _args.id;\n      let github_user = \"lukethacoder\";\n\n      fetch(`${GITHUB_BASE_API}/users/${args.id}`)\n        .then(res => res.json())\n        .then(git_data => {\n          console.log(\"git_data => \", git_data);\n          if (git_data.id) {\n            return {\n              id: git_data.id,\n              name: `Mr Git ${git_data.login}`,\n              status: \"wip\"\n            };\n          } else {\n            console.error(git_data.message);\n            return {\n              id: \"invalid\",\n              name: \"invalid\",\n              status: \"invalid\"\n            };\n          }\n        })\n        .catch(err => {\n          return {\n            id: 0,\n            name: err.message,\n            status: err.message\n          };\n        });\n      // try {\n      //   return fetch(`https://api.github.com/users/${github_user}`)\n      //     .then(user => ({\n      //       id: user.id,\n      //       name: `Mr Git ${user.login}`,\n      //       status: \"wip\"\n      //     }))\n      //     .catch(err => {\n      //       throw new AuthenticationError(\"Invalid Github Endpoint => \", err);\n      //     });\n      // } catch {\n      //   throw new AuthenticationError(\"Invalid Github Endpoint => \", err);\n      // }\n\n      // try {\n      //   const { id, email } = jwt.verify(token, JWT_SECRET);\n\n      //   return users.find(user => user.id === id && user.email === email);\n      // } catch {\n      //   throw new AuthenticationError(\n      //     \"Authentication token is invalid, please log in\"\n      //   );\n      // }\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}