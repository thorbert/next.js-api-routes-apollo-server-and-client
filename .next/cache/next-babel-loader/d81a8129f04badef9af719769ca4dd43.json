{"ast":null,"code":"// Hold all endpoints data here\nexport const resolvers = {\n  Query: {\n    viewer(_parent, _args, _context, _info) {\n      return {\n        id: 1,\n        name: \"John Smith 2\",\n        status: \"\"\n      };\n    },\n\n    git_user: async ({\n      id\n    }, args, context) => {\n      console.log(\"git_user id => \", id); // let github_user = _args.id;\n\n      let github_user = \"lukethacoder\";\n\n      try {\n        return fetch(`https://api.github.com/users/${github_user}`).then(user => ({\n          id: user.id,\n          name: `Mr Git ${user.login}`,\n          status: \"wip\"\n        })).catch(err => {\n          throw new AuthenticationError(\"Invalid Github Endpoint => \", err);\n        });\n      } catch {\n        throw new AuthenticationError(\"Invalid Github Endpoint => \", err);\n      } // try {\n      //   const { id, email } = jwt.verify(token, JWT_SECRET);\n      //   return users.find(user => user.id === id && user.email === email);\n      // } catch {\n      //   throw new AuthenticationError(\n      //     \"Authentication token is invalid, please log in\"\n      //   );\n      // }\n\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/lukes/Documents/Github/next.js-api-routes-apollo-server-and-client/apollo/resolvers.js"],"names":["resolvers","Query","viewer","_parent","_args","_context","_info","id","name","status","git_user","args","context","console","log","github_user","fetch","then","user","login","catch","err","AuthenticationError"],"mappings":"AAAA;AAEA,OAAO,MAAMA,SAAS,GAAG;AACvBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,CAACC,OAAD,EAAUC,KAAV,EAAiBC,QAAjB,EAA2BC,KAA3B,EAAkC;AACtC,aAAO;AAAEC,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,IAAI,EAAE,cAAf;AAA+BC,QAAAA,MAAM,EAAE;AAAvC,OAAP;AACD,KAHI;;AAILC,IAAAA,QAAQ,EAAE,OAAO;AAAEH,MAAAA;AAAF,KAAP,EAAeI,IAAf,EAAqBC,OAArB,KAAiC;AACzCC,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BP,EAA/B,EADyC,CAEzC;;AACA,UAAIQ,WAAW,GAAG,cAAlB;;AACA,UAAI;AACF,eAAOC,KAAK,CAAE,gCAA+BD,WAAY,EAA7C,CAAL,CACJE,IADI,CACCC,IAAI,KAAK;AACbX,UAAAA,EAAE,EAAEW,IAAI,CAACX,EADI;AAEbC,UAAAA,IAAI,EAAG,UAASU,IAAI,CAACC,KAAM,EAFd;AAGbV,UAAAA,MAAM,EAAE;AAHK,SAAL,CADL,EAMJW,KANI,CAMEC,GAAG,IAAI;AACZ,gBAAM,IAAIC,mBAAJ,CAAwB,6BAAxB,EAAuDD,GAAvD,CAAN;AACD,SARI,CAAP;AASD,OAVD,CAUE,MAAM;AACN,cAAM,IAAIC,mBAAJ,CAAwB,6BAAxB,EAAuDD,GAAvD,CAAN;AACD,OAhBwC,CAkBzC;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACD;AA/BI;AADgB,CAAlB","sourcesContent":["// Hold all endpoints data here\n\nexport const resolvers = {\n  Query: {\n    viewer(_parent, _args, _context, _info) {\n      return { id: 1, name: \"John Smith 2\", status: \"\" };\n    },\n    git_user: async ({ id }, args, context) => {\n      console.log(\"git_user id => \", id);\n      // let github_user = _args.id;\n      let github_user = \"lukethacoder\";\n      try {\n        return fetch(`https://api.github.com/users/${github_user}`)\n          .then(user => ({\n            id: user.id,\n            name: `Mr Git ${user.login}`,\n            status: \"wip\"\n          }))\n          .catch(err => {\n            throw new AuthenticationError(\"Invalid Github Endpoint => \", err);\n          });\n      } catch {\n        throw new AuthenticationError(\"Invalid Github Endpoint => \", err);\n      }\n\n      // try {\n      //   const { id, email } = jwt.verify(token, JWT_SECRET);\n\n      //   return users.find(user => user.id === id && user.email === email);\n      // } catch {\n      //   throw new AuthenticationError(\n      //     \"Authentication token is invalid, please log in\"\n      //   );\n      // }\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}