{"ast":null,"code":"// Hold all endpoints data here\nimport { createHttpLink } from \"apollo-link-http\";\nimport fetch from \"node-fetch\";\nconst GITHUB_BASE_API = \"https://api.github.com\";\nexport const resolvers = {\n  Query: {\n    viewer(_parent, _args, _context, _info) {\n      return {\n        id: 1,\n        name: \"John Smith 2\",\n        status: \"\"\n      };\n    },\n\n    git_user: async (parent, args, context, info) => {\n      let {\n        id\n      } = args;\n      return fetch(`${GITHUB_BASE_API}/users/${id}`).then(res => res.json()).then(git_data => {\n        if (git_data.id) {\n          return {\n            id: git_data.id,\n            name: git_data.login,\n            html_url: git_data.html_url,\n            status: \"wip\"\n          };\n        } else {\n          throw new Error({\n            message: \"invalid Github response\"\n          });\n        }\n      }).catch(err => {\n        console.log(\"err => \", err);\n        return {\n          id: 404,\n          name: err.message,\n          html_url: \"\",\n          status: err.message\n        };\n      });\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/lukes/Documents/Github/next.js-api-routes-apollo-server-and-client/apollo/resolvers.js"],"names":["createHttpLink","fetch","GITHUB_BASE_API","resolvers","Query","viewer","_parent","_args","_context","_info","id","name","status","git_user","parent","args","context","info","then","res","json","git_data","login","html_url","Error","message","catch","err","console","log"],"mappings":"AAAA;AACA,SAASA,cAAT,QAA+B,kBAA/B;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,MAAMC,eAAe,GAAG,wBAAxB;AAEA,OAAO,MAAMC,SAAS,GAAG;AACvBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,CAACC,OAAD,EAAUC,KAAV,EAAiBC,QAAjB,EAA2BC,KAA3B,EAAkC;AACtC,aAAO;AAAEC,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,IAAI,EAAE,cAAf;AAA+BC,QAAAA,MAAM,EAAE;AAAvC,OAAP;AACD,KAHI;;AAILC,IAAAA,QAAQ,EAAE,OAAOC,MAAP,EAAeC,IAAf,EAAqBC,OAArB,EAA8BC,IAA9B,KAAuC;AAC/C,UAAI;AAAEP,QAAAA;AAAF,UAASK,IAAb;AAEA,aAAOd,KAAK,CAAE,GAAEC,eAAgB,UAASQ,EAAG,EAAhC,CAAL,CACJQ,IADI,CACCC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADR,EAEJF,IAFI,CAECG,QAAQ,IAAI;AAChB,YAAIA,QAAQ,CAACX,EAAb,EAAiB;AACf,iBAAO;AACLA,YAAAA,EAAE,EAAEW,QAAQ,CAACX,EADR;AAELC,YAAAA,IAAI,EAAEU,QAAQ,CAACC,KAFV;AAGLC,YAAAA,QAAQ,EAAEF,QAAQ,CAACE,QAHd;AAILX,YAAAA,MAAM,EAAE;AAJH,WAAP;AAMD,SAPD,MAOO;AACL,gBAAM,IAAIY,KAAJ,CAAU;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAAV,CAAN;AACD;AACF,OAbI,EAcJC,KAdI,CAcEC,GAAG,IAAI;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,GAAvB;AACA,eAAO;AACLjB,UAAAA,EAAE,EAAE,GADC;AAELC,UAAAA,IAAI,EAAEgB,GAAG,CAACF,OAFL;AAGLF,UAAAA,QAAQ,EAAE,EAHL;AAILX,UAAAA,MAAM,EAAEe,GAAG,CAACF;AAJP,SAAP;AAMD,OAtBI,CAAP;AAuBD;AA9BI;AADgB,CAAlB","sourcesContent":["// Hold all endpoints data here\nimport { createHttpLink } from \"apollo-link-http\";\nimport fetch from \"node-fetch\";\nconst GITHUB_BASE_API = \"https://api.github.com\";\n\nexport const resolvers = {\n  Query: {\n    viewer(_parent, _args, _context, _info) {\n      return { id: 1, name: \"John Smith 2\", status: \"\" };\n    },\n    git_user: async (parent, args, context, info) => {\n      let { id } = args;\n\n      return fetch(`${GITHUB_BASE_API}/users/${id}`)\n        .then(res => res.json())\n        .then(git_data => {\n          if (git_data.id) {\n            return {\n              id: git_data.id,\n              name: git_data.login,\n              html_url: git_data.html_url,\n              status: \"wip\"\n            };\n          } else {\n            throw new Error({ message: \"invalid Github response\" });\n          }\n        })\n        .catch(err => {\n          console.log(\"err => \", err);\n          return {\n            id: 404,\n            name: err.message,\n            html_url: \"\",\n            status: err.message\n          };\n        });\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}